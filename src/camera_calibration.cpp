#include <iostream>
#include <fstream>

#include "core/sweep.h"

using namespace std;

//FOUND (127.335, 142.398)[640, 480]{1.16312} at (320, 0, 85)
//FOUND (363.636, 238.243)[640, 480]{1.19391} at (320, 0, 255)
//FOUND (366.351, 238.047)[640, 480]{1.18762} at (160, 0, 425)
//FOUND (365.808, 238.269)[640, 480]{1.19326} at (160, 0, 255)
//FOUND (366.035, 237.621)[640, 480]{1.19183} at (160, 0, 170)

// https://www.pyimagesearch.com/2015/01/19/find-distance-camera-objectmarker-using-python-opencv/
// F = (P x  D) / W
// The focal point (F) equals the apparent width in pixels (P) times the distance from the camera D
// divided by the actual width of the object (W)
// I find F by an average with some data.
// Then I can always get the distance from the other values.
// Dâ€™ = (W x F) / P

// This can be cool because it gives me the height of the jar after.
// Compute the focal point with the average of some data one dimension at a time.
/*double computeFocalPoint1d(vector<double> perceivedWidths, double distanceFromCamera, double actualWidth) {

  vector<double> focalPoints(perceivedWidth.size());

  for (auto it = perceivedWidths.begin(); it != perceivedWidths.end; it++) {
    double focalPoint = *it * distanceFromCamera / actualWidth;
    focalPoints.push_back(focalPoint);
    cout << "Focal point = " << focalPoint << endl;
  }

  double average = accumulate( focalPoints.begin(), focalPoints.end(), 0.0)/focalPoints.size();              
  return average;
}*/

int main(int argc, char** argv)
{ // 21 mm and 31 mm
  Mat frame;
  captureVideoImage(frame);
 
  // TODO: Ask arduino for arm position.
  cout << "WARNING: Assuming arm is at home position.";

  vector<DetectedHRCode> detected;
  detect(frame, detected, RAYON, 0.0, 0.0, 0.0);

  if (detected.size() < 1) {
    cerr << "Error did not detect any HRCode. Aborting...";
    return -1;
  }

  DetectedHRCode code = *detected.begin();
  cout << "Pixels per mm: " << code.code.scale << endl;

  ofstream myfile;
  myfile.open ("src/config/camera_constants.h");
  myfile << "// File autogenerated by camera_calibration.\n";
  myfile << "\n";
  myfile << "#ifndef CAMERA_CONSTANTS\n";
  myfile << "#define CAMERA_CONSTANTS\n";
  myfile << "\n";
  myfile << "#define CAMERA_WIDTH " << frame.cols << "\n";
  myfile << "#define CAMERA_HEIGHT " << frame.rows << "\n";

  //myfile << "#define CAMERA_FIELD_OF_VIEW 75.0 // degrees\n";
  // TODO: Camera focal point
  // myfile << "#define CAMERA_FOCAL_POINT 1234\n";
  myfile << "\n";
  myfile << "#endif\n";

  myfile.close();

  return 0;
}
